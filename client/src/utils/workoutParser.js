// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –ø–ª–∞–≤–∞–Ω–∏—é
export const parseWorkoutText = async (text) => {
  const lines = text.split('\n').filter(line => line.trim());
  
  // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
  const patterns = {
    // –ù–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workoutNumber: /^(\d+)[—è—è]\s*—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞|–¥–æ–º–∞—à–∫–∞/i,
    
    // –û–±—ä–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    volume: /(\d+)\s*–º/i,
    
    // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    intensity: /[üü°üü¢üî¥]/g,
    
    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    equipment: /(–ª–∞—Å—Ç—ã|–ª–æ–ø–∞—Ç–∫–∏|–∫–æ–ª–æ–±–∞—à–∫–∞|–¥–æ—Å–∫–∞|—Ç—Ä—É–±–∫–∞|–ø–æ—è—Å|—Ä–µ–∑–∏–Ω–∞|–∫–∏—Å—Ç–µ–≤—ã–µ\s+–ª–æ–ø–∞—Ç–∫–∏)/gi,
    
    // –°–ª–æ–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —á–∞—Å—Ç—è–º–∏
    complexExercise: /(\d+)\*(\d+)\s*([^0-9]+)/i,
    
    // –ü—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    simpleExercise: /(\d+)\s*([–∞-—è—ë]+)/i,
    
    // –û—Ç–¥—ã—Ö
    rest: /(–æ—Ç–¥—ã—Ö|–ø)\s*(\d+)(?:-(\d+))?\s*(—Å–µ–∫|–º–∏–Ω)?/i,
    
    // –ë–ª–æ–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    block: /^(—Ä–∞–∑–º–∏–Ω–∫–∞|–æ—Å–Ω–æ–≤–Ω–∞—è\s+—á–∞—Å—Ç—å|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è\s+—á–∞—Å—Ç—å|–∑–∞–º–∏–Ω–∫–∞|—Å–≤–æ–±–æ–¥–Ω–æ–µ\s+–ø–ª–∞–≤–∞–Ω–∏–µ|–æ—Å–Ω–æ–≤–Ω–∞—è|–∑–∞–º–∏–Ω–∫–∞)$/i,
    
    // –ü—É–ª—å—Å
    pulse: /–ø\s*(\d+)-(\d+)/i,
    
    // –†–µ–∂–∏–º
    mode: /R\s*(\d+\.\d+)/i
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª–µ–π –ø–ª–∞–≤–∞–Ω–∏—è
  const styleMap = {
    '–≤—Å—Ç': 'freestyle',
    '–≤–æ–ª—å–Ω—ã–π': 'freestyle',
    '–∫—Ä–æ–ª—å': 'freestyle',
    '–∫–º–ø–ª': 'IM',
    '–∫–º–ø—Å': 'IM',
    '–∫–æ–º–ø–ª–µ–∫—Å': 'IM',
    '–±–∞—Ç—Ç': 'butterfly',
    '–±–∞—Ç—Ç–µ—Ä—Ñ–ª—è–π': 'butterfly',
    '–±—Ä–∞—Å—Å': 'breaststroke',
    '—Å–ø–∏–Ω–∞': 'backstroke',
    '–Ω–∞ —Å–ø–∏–Ω–µ': 'backstroke',
    '–¥–µ–ª—å—Ñ–∏–Ω': 'butterfly',
    '–∫–∞—Ä–∞–±–∞—Å': '–∫–∞—Ä–∞–±–∞—Å' // —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
  };

  // –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ö–Ω–∏–∫
  const techniqueMap = {
    '–¥–∏—Ä–∏–∂—ë—Ä': '–¥–∏—Ä–∏–∂—ë—Ä',
    '—Å—É–ø–µ—Ä–º–µ–Ω': '—Å—É–ø–µ—Ä–º–µ–Ω',
    '–ø–µ—Ä–µ–º–µ–Ω–∫–∞': '–ø–µ—Ä–µ–º–µ–Ω–∫–∞',
    '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π': '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π',
    '—Å—Ç—Ä–µ–ª–æ—á–∫–∞': '—Å—Ç—Ä–µ–ª–æ—á–∫–∞',
    '2—Ö —É–¥': '2—Ö —É–¥',
    '3—Ö —É–¥': '3—Ö —É–¥',
    '–¥–≤–æ–π–∫–∏': '–¥–≤–æ–π–∫–∏',
    '—á–µ—Ç–≤–µ—Ä–∫–∏': '—á–µ—Ç–≤–µ—Ä–∫–∏',
    '—à–µ—Å—Ç–µ—Ä–∫–∏': '—à–µ—Å—Ç–µ—Ä–∫–∏'
  };

  // –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤
  const blockTypeMap = {
    '—Ä–∞–∑–º–∏–Ω–∫–∞': 'warmup',
    '–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å': 'main',
    '–æ—Å–Ω–æ–≤–Ω–∞—è': 'main',
    '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å': 'technical',
    '–∑–∞–º–∏–Ω–∫–∞': 'cooldown',
    '—Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ': 'freestyle'
  };

  let currentBlock = { type: 'main', exercises: [] };
  const blocks = [];
  let equipment = new Set();
  let intensity = 'üü°';
  let volume = 0;
  let workoutNumber = null;
  let workoutTitle = '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞';

  for (const line of lines) {
    const trimmedLine = line.trim();
    
    if (!trimmedLine) continue;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const workoutMatch = trimmedLine.match(patterns.workoutNumber);
    if (workoutMatch) {
      workoutNumber = parseInt(workoutMatch[1]);
      workoutTitle = `${workoutMatch[1]}—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞`;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
    const volumeMatch = trimmedLine.match(patterns.volume);
    if (volumeMatch) {
      volume = parseInt(volumeMatch[1]);
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫
    const blockMatch = trimmedLine.match(patterns.block);
    if (blockMatch) {
      if (currentBlock.exercises.length > 0) {
        blocks.push(currentBlock);
      }
      currentBlock = {
        type: blockTypeMap[blockMatch[1].toLowerCase()] || 'main',
        exercises: []
      };
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–æ–∂–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4*200 —Å —á–∞—Å—Ç—è–º–∏)
    const complexMatch = trimmedLine.match(patterns.complexExercise);
    if (complexMatch) {
      const [, repeats, distance, description] = complexMatch;
      
      // –ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      const parts = parseExerciseParts(description);
      
      const exercise = {
        description: trimmedLine,
        repeats: parseInt(repeats),
        distance: parseInt(distance),
        totalDistance: parseInt(repeats) * parseInt(distance),
        parts: parts,
        rest: null,
        equipment: [],
        intensity: null,
        pulse: null,
        mode: null
      };

      // –ò—â–µ–º –æ—Ç–¥—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
      const nextLine = lines[lines.indexOf(line) + 1];
      if (nextLine) {
        const restMatch = nextLine.match(patterns.rest);
        if (restMatch) {
          exercise.rest = nextLine.trim();
        }
      }

      currentBlock.exercises.push(exercise);
      volume += exercise.totalDistance;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    const simpleMatch = trimmedLine.match(patterns.simpleExercise);
    if (simpleMatch) {
      const [, distance, style] = simpleMatch;
      const exercise = {
        description: trimmedLine,
        repeats: 1,
        distance: parseInt(distance),
        totalDistance: parseInt(distance),
        parts: [{
          distance: parseInt(distance),
          style: styleMap[style.toLowerCase()] || style.toLowerCase(),
          technique: null,
          intensity: null,
          breathing: null
        }],
        rest: null,
        equipment: [],
        intensity: null,
        pulse: null,
        mode: null
      };

      currentBlock.exercises.push(exercise);
      volume += exercise.totalDistance;
      continue;
    }

    // –ò—â–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const equipmentMatches = trimmedLine.match(patterns.equipment);
    if (equipmentMatches) {
      equipmentMatches.forEach(item => equipment.add(item.toLowerCase()));
    }

    // –ò—â–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    const intensityMatch = trimmedLine.match(patterns.intensity);
    if (intensityMatch) {
      intensity = intensityMatch[0];
    }

    // –ò—â–µ–º –ø—É–ª—å—Å
    const pulseMatch = trimmedLine.match(patterns.pulse);
    if (pulseMatch) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
      if (currentBlock.exercises.length > 0) {
        const lastExercise = currentBlock.exercises[currentBlock.exercises.length - 1];
        lastExercise.pulse = `–ü${pulseMatch[1]}-${pulseMatch[2]}`;
      }
    }

    // –ò—â–µ–º —Ä–µ–∂–∏–º
    const modeMatch = trimmedLine.match(patterns.mode);
    if (modeMatch) {
      if (currentBlock.exercises.length > 0) {
        const lastExercise = currentBlock.exercises[currentBlock.exercises.length - 1];
        lastExercise.mode = `R ${modeMatch[1]}`;
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
  if (currentBlock.exercises.length > 0) {
    blocks.push(currentBlock);
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π
  if (blocks.length === 0) {
    blocks.push({ type: 'main', exercises: [] });
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const title = workoutNumber ? `${workoutNumber}—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (${volume}–º)` : `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (${volume}–º)`;

  return {
    title,
    volume,
    intensity,
    equipment: Array.from(equipment),
    blocks,
    workoutNumber
  };
};

// –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—Ç–µ–π —Å–ª–æ–∂–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
const parseExerciseParts = (description) => {
  const parts = [];
  const segments = description.split('+').map(s => s.trim());
  
  segments.forEach(segment => {
    const part = {
      distance: 50, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      style: null,
      technique: null,
      intensity: null,
      breathing: null
    };

    // –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    const distanceMatch = segment.match(/(\d+)/);
    if (distanceMatch) {
      part.distance = parseInt(distanceMatch[1]);
    }

    // –ò—â–µ–º —Å—Ç–∏–ª—å
    const styleMap = {
      '–≤—Å—Ç': 'freestyle',
      '–±–∞—Ç—Ç': 'butterfly',
      '–±—Ä–∞—Å—Å': 'breaststroke',
      '—Å–ø–∏–Ω–∞': 'backstroke',
      '–Ω–∞ —Å–ø–∏–Ω–µ': 'backstroke',
      '–∫–∞—Ä–∞–±–∞—Å': '–∫–∞—Ä–∞–±–∞—Å'
    };

    for (const [key, value] of Object.entries(styleMap)) {
      if (segment.toLowerCase().includes(key)) {
        part.style = value;
        break;
      }
    }

    // –ò—â–µ–º —Ç–µ—Ö–Ω–∏–∫—É
    const techniqueMap = {
      '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π': '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π',
      '—Å—Ç—Ä–µ–ª–æ—á–∫–∞': '—Å—Ç—Ä–µ–ª–æ—á–∫–∞',
      '–º—è–≥–∫–æ': '–º—è–≥–∫–æ',
      '–º–æ—â–Ω–æ': '–º–æ—â–Ω–æ',
      '–∫–∞–π—Ñ—É—è': '–∫–∞–π—Ñ—É—è'
    };

    for (const [key, value] of Object.entries(techniqueMap)) {
      if (segment.toLowerCase().includes(key)) {
        if (key === '–º—è–≥–∫–æ' || key === '–º–æ—â–Ω–æ' || key === '–∫–∞–π—Ñ—É—è') {
          part.intensity = value;
        } else {
          part.technique = value;
        }
        break;
      }
    }

    parts.push(part);
  });

  return parts;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
const generateTitle = (blocks, volume, workoutNumber) => {
  if (workoutNumber) {
    return `${workoutNumber}—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (${volume}–º)`;
  }
  
  const blockTypes = blocks.map(block => block.type);
  const hasWarmup = blockTypes.includes('warmup');
  const hasCooldown = blockTypes.includes('cooldown');
  
  let title = '';
  
  if (hasWarmup && hasCooldown) {
    title = '–ü–æ–ª–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞';
  } else if (hasWarmup) {
    title = '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Ä–∞–∑–º–∏–Ω–∫–æ–π';
  } else if (hasCooldown) {
    title = '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å –∑–∞–º–∏–Ω–∫–æ–π';
  } else {
    title = '–û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞';
  }
  
  return `${title} (${volume}–º)`;
};

// –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const sampleWorkouts = {
  basic: `1—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–¥–æ–º–∞—à–∫–∞)
2200–º üü°

–†–∞–∑–º–∏–Ω–∫–∞
4√ó50 –≤—Å—Ç
–û—Ç–¥—ã—Ö 15 —Å–µ–∫

–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
8√ó400 –∫–º–ø–ª
–ü 22-23

–ó–∞–º–∏–Ω–∫–∞
2√ó100 –≤—Å—Ç`,

  complex: `3—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–¥–æ–º–∞—à–∫–∞)
3500–º üü°

–ü–æ–¥–≥–æ—Ç–æ–≤—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: –ª–∞—Å—Ç—ã, –ª–æ–ø–∞—Ç–∫–∏, –∫–æ–ª–æ–±–∞—à–∫–∞

–†–∞–∑–º–∏–Ω–∫–∞
4√ó50 –≤—Å—Ç
–û—Ç–¥—ã—Ö 15 —Å–µ–∫

–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (–≤ –∫–∏—Å—Ç–µ–≤—ã—Ö –ª–æ–ø–∞—Ç–∫–∞—Ö)
4√ó200
50 –∫–∞—Ä–∞–±–∞—Å + 50 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ç—Ç + 50 –Ω–∞ —Å–ø–∏–Ω–µ –≤ —Å—Ç—Ä–µ–ª–æ—á–∫–µ + 50 –≤—Å—Ç –º—è–≥–∫–æ
–û—Ç–¥—ã—Ö 30 —Å–µ–∫

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å
3√ó100 –∫–æ–º–ø–ª–µ–∫—Å –≤ –ª–∞—Å—Ç–∞—Ö
–û—Ç–¥—ã—Ö 20 —Å–µ–∫

1000–º –≤ –ª–∞—Å—Ç–∞—Ö –∏ –ª–æ–ø–∞—Ç–∫–∞—Ö
–ú—è–≥–∫–æ, –≤ —Å–≤–æ—ë —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ
–û—Ç–¥—ã—Ö 60 —Å–µ–∫

1000–º –±–µ–∑ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
–î–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–µ–º–ø –∫–∞–∂–¥—ã–µ 100–º
–û—Ç–¥—ã—Ö 60 —Å–µ–∫

1000–º –≤ –ª–∞—Å—Ç–∞—Ö –∏ –ª–æ–ø–∞—Ç–∫–∞—Ö
–ú—è–≥–∫–æ, –∫–∞–π—Ñ—É—è

–ó–∞–º–∏–Ω–∫–∞
2√ó100 –≤—Å—Ç`,

  equipment: `–†–∞–∑–º–∏–Ω–∫–∞
4√ó50 –≤—Å—Ç —Å –ª–∞—Å—Ç–∞–º–∏
4√ó50 –±—Ä–∞—Å—Å —Å –ª–æ–ø–∞—Ç–∫–∞–º–∏

–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
8√ó100 –∫–º–ø–ª —Å –∫–æ–ª–æ–±–∞—à–∫–æ–π
–ü 22-23

–ó–∞–º–∏–Ω–∫–∞
2√ó100 –≤—Å—Ç`
};
