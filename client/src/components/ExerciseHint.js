import React, { useState } from 'react';
import { Info, ChevronDown, ChevronUp } from 'lucide-react';
import { getStyleHint, getPulseHint, getModeHint, findHint } from '../utils/swimmingTerms';

const ExerciseHint = ({ exercise }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  const getHints = () => {
    const hints = [];
    const foundTerms = new Set(); // –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const addHint = (hintData, type, title, icon) => {
      if (hintData && !foundTerms.has(hintData.title)) {
        foundTerms.add(hintData.title);
        hints.push({
          type: type,
          title: title,
          data: hintData,
          icon: icon
        });
      }
    };

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏ –∏–∑ —á–∞—Å—Ç–µ–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if (exercise.parts && exercise.parts.length > 0) {
      exercise.parts.forEach(part => {
        if (part.style) {
          const styleHint = getStyleHint(part.style);
          addHint(styleHint, 'style', '–°—Ç–∏–ª—å –ø–ª–∞–≤–∞–Ω–∏—è', 'üèä‚Äç‚ôÇÔ∏è');
        }
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–ª—å—Å–æ–≤—É—é –∑–æ–Ω—É
    if (exercise.pulse) {
      const pulseHint = getPulseHint(exercise.pulse);
      addHint(pulseHint, 'pulse', '–ü—É–ª—å—Å–æ–≤–∞—è –∑–æ–Ω–∞', '‚ù§Ô∏è');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if (exercise.mode) {
      const modeHint = getModeHint(exercise.mode);
      addHint(modeHint, 'mode', '–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '‚è±Ô∏è');
    }

    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const description = exercise.description || '';
    const words = description.toLowerCase().split(/\s+/);
    
    words.forEach(word => {
      const cleanWord = word.replace(/[^–∞-—è—ë]/g, ''); // –£–±–∏—Ä–∞–µ–º –Ω–µ-—Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
      if (cleanWord.length > 2) { // –ò—â–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
        const hint = findHint(cleanWord);
        if (hint) {
          addHint(hint.data, hint.type, getHintTitle(hint.type), getHintIcon(hint.type));
        }
      }
    });

    // 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    if (exercise.parts && exercise.parts.length > 0) {
      exercise.parts.forEach(part => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É
        if (part.technique) {
          const techniqueHint = findHint(part.technique);
          if (techniqueHint) {
            addHint(techniqueHint.data, 'technical', '–¢–µ—Ö–Ω–∏–∫–∞', 'üéØ');
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        if (part.intensity) {
          const intensityHint = findHint(part.intensity);
          if (intensityHint) {
            addHint(intensityHint.data, 'intensity', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', '‚ö°');
          }
        }
      });
    }

    return hints;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const getHintTitle = (type) => {
    const titles = {
      'style': '–°—Ç–∏–ª—å –ø–ª–∞–≤–∞–Ω–∏—è',
      'technical': '–¢–µ—Ö–Ω–∏–∫–∞',
      'pulse': '–ü—É–ª—å—Å–æ–≤–∞—è –∑–æ–Ω–∞',
      'mode': '–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      'intensity': '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'
    };
    return titles[type] || '–ü–æ–¥—Å–∫–∞–∑–∫–∞';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const getHintIcon = (type) => {
    const icons = {
      'style': 'üèä‚Äç‚ôÇÔ∏è',
      'technical': 'üéØ',
      'pulse': '‚ù§Ô∏è',
      'mode': '‚è±Ô∏è',
      'intensity': '‚ö°'
    };
    return icons[type] || 'üí°';
  };

  const hints = getHints();

  if (hints.length === 0) {
    return null;
  }



  return (
    <div className="mb-4">
      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ */}
      <button
        onClick={() => setIsExpanded(!isExpanded)}
        className="w-full flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-xl hover:bg-blue-100 transition-colors"
      >
        <div className="flex items-center gap-2">
          <Info className="w-5 h-5 text-blue-600" />
          <span className="font-medium text-blue-700">
            –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é ({hints.length})
          </span>
        </div>
        {isExpanded ? (
          <ChevronUp className="w-5 h-5 text-blue-600" />
        ) : (
          <ChevronDown className="w-5 h-5 text-blue-600" />
        )}
      </button>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ */}
      {isExpanded && (
        <div className="mt-3 bg-white border border-gray-200 rounded-xl overflow-hidden">
          <div className="p-4 space-y-4">
            {hints.map((hint, index) => (
              <div key={index} className="border-b border-gray-100 last:border-b-0 pb-4 last:pb-0">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
                <div className="flex items-center gap-2 mb-3">
                  <span className="text-lg">{hint.icon}</span>
                  <h3 className="font-semibold text-gray-800">{hint.data.title}</h3>
                </div>

                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                <div className="mb-3">
                  <p className="text-gray-600 text-sm leading-relaxed">
                    {hint.data.description}
                  </p>
                </div>

                {/* –î–µ—Ç–∞–ª–∏/–§–∞–∑—ã */}
                {(hint.data.details || hint.data.phases) && (
                  <div className="mb-3">
                    <h4 className="font-medium text-gray-700 mb-2 text-sm">
                      {hint.data.phases ? '–§–∞–∑—ã:' : '–î–µ—Ç–∞–ª–∏:'}
                    </h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      {(hint.data.details || hint.data.phases).map((item, idx) => (
                        <li key={idx} className="flex items-start gap-2">
                          <span className="text-blue-500 mt-1 flex-shrink-0">
                            {hint.data.phases ? `${idx + 1}.` : '‚Ä¢'}
                          </span>
                          <span className="leading-relaxed">{item}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* –°–æ–≤–µ—Ç—ã */}
                {hint.data.tips && (
                  <div className="mb-3">
                    <h4 className="font-medium text-gray-700 mb-2 text-sm">–°–æ–≤–µ—Ç—ã:</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      {hint.data.tips.map((tip, idx) => (
                        <li key={idx} className="flex items-start gap-2">
                          <span className="text-green-500 mt-1 flex-shrink-0">‚úì</span>
                          <span className="leading-relaxed">{tip}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {hint.data.intensity && (
                  <div className="mb-3">
                    <h4 className="font-medium text-gray-700 mb-1 text-sm">–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</h4>
                    <p className="text-sm text-gray-600">{hint.data.intensity}</p>
                  </div>
                )}

                {hint.data.example && (
                  <div>
                    <h4 className="font-medium text-gray-700 mb-1 text-sm">–ü—Ä–∏–º–µ—Ä:</h4>
                    <p className="text-sm text-gray-600">{hint.data.example}</p>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ExerciseHint;
