const express = require('express');
const router = express.Router();

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
router.post('/parse', async (req, res) => {
  try {
    const { text } = req.body;
    
    if (!text || typeof text !== 'string') {
      return res.status(400).json({ 
        error: '–¢–µ–∫—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' 
      });
    }

    if (text.length < 10) {
      return res.status(400).json({ 
        error: '–¢–µ–∫—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π' 
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    const parsedWorkout = await parseWorkoutText(text);
    
    res.json({
      success: true,
      workout: parsedWorkout,
      message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞'
    });

  } catch (error) {
    console.error('Parse error:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
const extractEquipmentFromDescription = (description) => {
  const equipmentPattern = /(–ª–∞—Å—Ç—ã|–ª–æ–ø–∞—Ç–∫–∏|–∫–æ–ª–æ–±–∞—à–∫–∞|–¥–æ—Å–∫–∞|—Ç—Ä—É–±–∫–∞|–ø–æ—è—Å|—Ä–µ–∑–∏–Ω–∞|–∫–∏—Å—Ç–µ–≤—ã–µ\s+–ª–æ–ø–∞—Ç–∫–∏)/gi;
  const matches = description.match(equipmentPattern);
  return matches ? matches.map(match => match.toLowerCase()) : [];
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const parseWorkoutText = async (text) => {
  const lines = text.split('\n').filter(line => line.trim());
  
  const patterns = {
    // –ù–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workoutNumber: /^(\d+)[—è—è]\s*—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞|–¥–æ–º–∞—à–∫–∞/i,
    
    // –û–±—ä–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    volume: /(\d+)\s*–º/i,
    
    // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    intensity: /[üü°üü¢üî¥]/g,
    
    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    equipment: /(–ª–∞—Å—Ç—ã|–ª–æ–ø–∞—Ç–∫–∏|–∫–æ–ª–æ–±–∞—à–∫–∞|–¥–æ—Å–∫–∞|—Ç—Ä—É–±–∫–∞|–ø–æ—è—Å|—Ä–µ–∑–∏–Ω–∞|–∫–∏—Å—Ç–µ–≤—ã–µ\s+–ª–æ–ø–∞—Ç–∫–∏)/gi,
    
    // –°–ª–æ–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —á–∞—Å—Ç—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∫–∞—Ä–∞–±–∞—Å + 50 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ç—Ç + 50 –Ω–∞ —Å–ø–∏–Ω–µ –≤ —Å—Ç—Ä–µ–ª–æ—á–∫–µ + 50 –≤—Å—Ç –º—è–≥–∫–æ)
    complexExercise: /(\d+)\s+([–∞-—è—ë\s]+(?:\s*\+\s*\d+\s+[–∞-—è—ë\s]+)*)/i,
    
    // –°–ª–æ–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –∏ —á–∞—Å—Ç—è–º–∏
    complexRepeatExercise: /(\d+)[√óx]\s*(\d+)\s*([^0-9]+)/i,
    
    // –ü—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    simpleExercise: /(\d+)\s*([–∞-—è—ë]+)/i,
    
    // –û—Ç–¥—ã—Ö - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω (–Ω–µ –ø—É—Ç–∞—Ç—å —Å –ø—É–ª—å—Å–æ–º)
    rest: /^–æ—Ç–¥—ã—Ö\s*(\d+)(?:-(\d+))?\s*(—Å–µ–∫|–º–∏–Ω)?/i,
    
    // –ë–ª–æ–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    block: /^(—Ä–∞–∑–º–∏–Ω–∫–∞|–æ—Å–Ω–æ–≤–Ω–∞—è\s+—á–∞—Å—Ç—å|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è\s+—á–∞—Å—Ç—å|–∑–∞–º–∏–Ω–∫–∞|—Å–≤–æ–±–æ–¥–Ω–æ–µ\s+–ø–ª–∞–≤–∞–Ω–∏–µ|–æ—Å–Ω–æ–≤–Ω–∞—è|–∑–∞–º–∏–Ω–∫–∞)$/i,
    
    // –ü—É–ª—å—Å - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    pulse: /^–ø\s*(\d+)-(\d+)/i,
    
    // –†–µ–∂–∏–º
    mode: /R\s*(\d+\.\d+)/i,
    
    // –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
    repeatExercise: /(\d+)[√óx]\s*(\d+)\s+([–∞-—è—ë]+(?:\s+—Å\s+[–∞-—è—ë]+)?)/i
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª–µ–π –ø–ª–∞–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
  const styleMap = {
    '–≤—Å—Ç': 'freestyle',
    '–≤–æ–ª—å–Ω—ã–π': 'freestyle',
    '–∫—Ä–æ–ª—å': 'freestyle',
    '–∫—Ä–æ–ª—å –≤ –ø–æ–ª–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏': 'freestyle',
    '–∫—Ä–æ–ª—å –≤ –ø.–∫.': 'freestyle',
    '–∫–º–ø–ª': 'IM',
    '–∫–º–ø—Å': 'IM',
    '–∫–æ–º–ø–ª–µ–∫—Å': 'IM',
    '–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ': 'IM',
    '–∫–æ–º–ø. –ø–ª–∞–≤.': 'IM',
    '–±–∞—Ç—Ç': 'butterfly',
    '–±–∞—Ç—Ç–µ—Ä—Ñ–ª—è–π': 'butterfly',
    '–¥–µ–ª—å—Ñ–∏–Ω': 'butterfly',
    '–±—Ä–∞—Å—Å': 'breaststroke',
    '—Å–ø–∏–Ω–∞': 'backstroke',
    '–Ω–∞ —Å–ø–∏–Ω–µ': 'backstroke',
    '–∫–∞—Ä–∞–±–∞—Å': '–∫–∞—Ä–∞–±–∞—Å', // —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
    '–¥–∏—Ä–∏–∂—ë—Ä': '–¥–∏—Ä–∏–∂—ë—Ä', // —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
    '–ø–µ—Ä–µ–º–µ–Ω–∫–∞': '–ø–µ—Ä–µ–º–µ–Ω–∫–∞', // —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
    '—Å—É–ø–µ—Ä–º–µ–Ω': '—Å—É–ø–µ—Ä–º–µ–Ω' // —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ö–Ω–∏–∫ —Å —É—á–µ—Ç–æ–º —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
  const techniqueMap = {
    '–¥–∏—Ä–∏–∂—ë—Ä': '–¥–∏—Ä–∏–∂—ë—Ä',
    '—Å—É–ø–µ—Ä–º–µ–Ω': '—Å—É–ø–µ—Ä–º–µ–Ω',
    '–ø–µ—Ä–µ–º–µ–Ω–∫–∞': '–ø–µ—Ä–µ–º–µ–Ω–∫–∞',
    '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π': '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π',
    '—Å—Ç—Ä–µ–ª–æ—á–∫–∞': '—Å—Ç—Ä–µ–ª–æ—á–∫–∞',
    '2—Ö —É–¥': '2—Ö —É–¥',
    '3—Ö —É–¥': '3—Ö —É–¥',
    '–¥–≤–æ–π–∫–∏': '–¥–≤–æ–π–∫–∏',
    '—á–µ—Ç–≤–µ—Ä–∫–∏': '—á–µ—Ç–≤–µ—Ä–∫–∏',
    '—à–µ—Å—Ç–µ—Ä–∫–∏': '—à–µ—Å—Ç–µ—Ä–∫–∏',
    '–¥–ª–∏–Ω–Ω—ã–π –≥—Ä–µ–±–æ–∫': '–¥–ª–∏–Ω–Ω—ã–π –≥—Ä–µ–±–æ–∫',
    '–≥—Ä–µ–±–æ–∫': '–≥—Ä–µ–±–æ–∫',
    '–∑–∞—Ö–≤–∞—Ç': '–∑–∞—Ö–≤–∞—Ç',
    '–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ': '–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ',
    '–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ': '–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ',
    '–ø—Ä–æ–Ω–æ—Å': '–ø—Ä–æ–Ω–æ—Å',
    '–º—è–≥–∫–æ—Å—Ç—å': '–º—è–≥–∫–æ—Å—Ç—å',
    '–Ω–∞–ø–ª—ã–≤': '–Ω–∞–ø–ª—ã–≤',
    '—Ä–æ—Ç–∞—Ü–∏—è': '—Ä–æ—Ç–∞—Ü–∏—è',
    '—Ü–∏–∫–ª': '—Ü–∏–∫–ª',
    '—Å–º–µ–Ω–∞ —Ä—É–∫': '—Å–º–µ–Ω–∞ —Ä—É–∫',
    '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä–µ–±–∫–∞': '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä–µ–±–∫–∞',
    'swolf': 'swolf'
  };

  // –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤
  const blockTypeMap = {
    '—Ä–∞–∑–º–∏–Ω–∫–∞': 'warmup',
    '–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å': 'main',
    '–æ—Å–Ω–æ–≤–Ω–∞—è': 'main',
    '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å': 'technical',
    '–∑–∞–º–∏–Ω–∫–∞': 'cooldown',
    '—Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ': 'freestyle'
  };

  let currentBlock = { type: 'warmup', exercises: [] };
  const blocks = [];
  let equipment = new Set();
  let intensity = 'üü°';
  let volume = 0;
  let workoutNumber = null;
  let workoutTitle = '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞';
  let currentEquipment = []; // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const trimmedLine = line.trim();
    
    if (!trimmedLine) continue;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const workoutMatch = trimmedLine.match(patterns.workoutNumber);
    if (workoutMatch) {
      workoutNumber = parseInt(workoutMatch[1]);
      workoutTitle = `${workoutMatch[1]}—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞`;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
    const volumeMatch = trimmedLine.match(patterns.volume);
    if (volumeMatch) {
      volume = parseInt(volumeMatch[1]);
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫
    const blockMatch = trimmedLine.match(patterns.block);
    if (blockMatch) {
      if (currentBlock.exercises.length > 0) {
        blocks.push(currentBlock);
      }
      currentBlock = {
        type: blockTypeMap[blockMatch[1].toLowerCase()] || 'main',
        exercises: []
      };
      currentEquipment = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É–ª—å—Å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü–ï–†–ï–î —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏)
    const pulseMatch = trimmedLine.match(patterns.pulse);
    if (pulseMatch) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
      if (currentBlock.exercises.length > 0) {
        const lastExercise = currentBlock.exercises[currentBlock.exercises.length - 1];
        lastExercise.pulse = `–ü${pulseMatch[1]}-${pulseMatch[2]}`;
      }
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–¥—ã—Ö
    const restMatch = trimmedLine.match(patterns.rest);
    if (restMatch) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É –æ—Ç–¥—ã—Ö
      if (currentBlock.exercises.length > 0) {
        const lastExercise = currentBlock.exercises[currentBlock.exercises.length - 1];
        lastExercise.rest = trimmedLine;
      }
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const equipmentMatch = trimmedLine.match(patterns.equipment);
    if (equipmentMatch) {
      currentEquipment.push(trimmedLine.toLowerCase());
      equipment.add(trimmedLine.toLowerCase());
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4√ó50 –≤—Å—Ç)
    const repeatMatch = trimmedLine.match(patterns.repeatExercise);
    if (repeatMatch) {
      const [, repeats, distance, styleText] = repeatMatch;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å –∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
      let style = styleText;
      let exerciseEquipment = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
      if (styleText.includes('—Å –ª–∞—Å—Ç–∞–º–∏')) {
        exerciseEquipment.push('–ª–∞—Å—Ç—ã');
        style = styleText.replace('—Å –ª–∞—Å—Ç–∞–º–∏', '').trim();
      }
      if (styleText.includes('—Å –ª–æ–ø–∞—Ç–∫–∞–º–∏')) {
        exerciseEquipment.push('–ª–æ–ø–∞—Ç–∫–∏');
        style = styleText.replace('—Å –ª–æ–ø–∞—Ç–∫–∞–º–∏', '').trim();
      }
      if (styleText.includes('—Å –∫–æ–ª–æ–±–∞—à–∫–æ–π')) {
        exerciseEquipment.push('–∫–æ–ª–æ–±–∞—à–∫–∞');
        style = styleText.replace('—Å –∫–æ–ª–æ–±–∞—à–∫–æ–π', '').trim();
      }
      if (styleText.includes('—Å –¥–æ—Å–∫–æ–π')) {
        exerciseEquipment.push('–¥–æ—Å–∫–∞');
        style = styleText.replace('—Å –¥–æ—Å–∫–æ–π', '').trim();
      }
      if (styleText.includes('—Å —Ç—Ä—É–±–∫–æ–π')) {
        exerciseEquipment.push('—Ç—Ä—É–±–∫–∞');
        style = styleText.replace('—Å —Ç—Ä—É–±–∫–æ–π', '').trim();
      }
      if (styleText.includes('—Å –ø–æ—è—Å–æ–º')) {
        exerciseEquipment.push('–ø–æ—è—Å');
        style = styleText.replace('—Å –ø–æ—è—Å–æ–º', '').trim();
      }
      if (styleText.includes('—Å —Ä–µ–∑–∏–Ω–æ–π')) {
        exerciseEquipment.push('—Ä–µ–∑–∏–Ω–∞');
        style = styleText.replace('—Å —Ä–µ–∑–∏–Ω–æ–π', '').trim();
      }
      if (styleText.includes('—Å –∫–∏—Å—Ç–µ–≤—ã–º–∏ –ª–æ–ø–∞—Ç–∫–∞–º–∏')) {
        exerciseEquipment.push('–∫–∏—Å—Ç–µ–≤—ã–µ –ª–æ–ø–∞—Ç–∫–∏');
        style = styleText.replace('—Å –∫–∏—Å—Ç–µ–≤—ã–º–∏ –ª–æ–ø–∞—Ç–∫–∞–º–∏', '').trim();
      }
      
      console.log('Processing exercise:', trimmedLine, 'Style:', style, 'Equipment:', exerciseEquipment);
      
      const exercise = {
        description: trimmedLine,
        repeats: parseInt(repeats),
        distance: parseInt(distance),
        totalDistance: parseInt(repeats) * parseInt(distance),
        parts: [{
          distance: parseInt(distance),
          style: styleMap[style.toLowerCase()] || style.toLowerCase(),
          technique: null,
          intensity: null,
          breathing: null
        }],
        rest: null,
        equipment: exerciseEquipment,
        intensity: null,
        pulse: null,
        mode: null
      };
      
      console.log('Created exercise with equipment:', exercise.equipment);

      currentBlock.exercises.push(exercise);
      volume += exercise.totalDistance;
      currentEquipment = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–æ–∂–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —á–∞—Å—Ç—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∫–∞—Ä–∞–±–∞—Å + 50 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ç—Ç + 50 –Ω–∞ —Å–ø–∏–Ω–µ –≤ —Å—Ç—Ä–µ–ª–æ—á–∫–µ + 50 –≤—Å—Ç –º—è–≥–∫–æ)
    const complexMatch = trimmedLine.match(patterns.complexExercise);
    if (complexMatch) {
      const [, totalDistance, description] = complexMatch;
      
      // –ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      const parts = parseExerciseParts(description);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      const exerciseEquipment = extractEquipmentFromDescription(trimmedLine);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —á–∞—Å—Ç–µ–π
      const calculatedDistance = parts.reduce((sum, part) => sum + part.distance, 0);
      
      const exercise = {
        description: trimmedLine,
        repeats: 1,
        distance: calculatedDistance,
        totalDistance: calculatedDistance,
        parts: parts,
        rest: null,
        equipment: exerciseEquipment,
        intensity: null,
        pulse: null,
        mode: null
      };

      currentBlock.exercises.push(exercise);
      volume += exercise.totalDistance;
      currentEquipment = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–æ–∂–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4√ó200 —Å —á–∞—Å—Ç—è–º–∏)
    const complexRepeatMatch = trimmedLine.match(patterns.complexRepeatExercise);
    if (complexRepeatMatch) {
      const [, repeats, distance, description] = complexRepeatMatch;
      
      // –ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      const parts = parseExerciseParts(description);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      const exerciseEquipment = extractEquipmentFromDescription(trimmedLine);
      
      const exercise = {
        description: trimmedLine,
        repeats: parseInt(repeats),
        distance: parseInt(distance),
        totalDistance: parseInt(repeats) * parseInt(distance),
        parts: parts,
        rest: null,
        equipment: exerciseEquipment,
        intensity: null,
        pulse: null,
        mode: null
      };

      currentBlock.exercises.push(exercise);
      volume += exercise.totalDistance;
      currentEquipment = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    const simpleMatch = trimmedLine.match(patterns.simpleExercise);
    if (simpleMatch) {
      const [, distance, style] = simpleMatch;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      const exerciseEquipment = extractEquipmentFromDescription(trimmedLine);
      
      const exercise = {
        description: trimmedLine,
        repeats: 1,
        distance: parseInt(distance),
        totalDistance: parseInt(distance),
        parts: [{
          distance: parseInt(distance),
          style: styleMap[style.toLowerCase()] || style.toLowerCase(),
          technique: null,
          intensity: null,
          breathing: null
        }],
        rest: null,
        equipment: exerciseEquipment, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        intensity: null,
        pulse: null,
        mode: null
      };

      currentBlock.exercises.push(exercise);
      volume += exercise.totalDistance;
      currentEquipment = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    const intensityMatch = trimmedLine.match(patterns.intensity);
    if (intensityMatch) {
      intensity = intensityMatch[0];
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∂–∏–º
    const modeMatch = trimmedLine.match(patterns.mode);
    if (modeMatch) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
      if (currentBlock.exercises.length > 0) {
        const lastExercise = currentBlock.exercises[currentBlock.exercises.length - 1];
        lastExercise.mode = `R ${modeMatch[1]}`;
      }
      continue;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
  if (currentBlock.exercises.length > 0) {
    blocks.push(currentBlock);
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–∫ —Å —Ç–∏–ø–æ–º main
  if (blocks.length === 0) {
    blocks.push({ type: 'main', exercises: [] });
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º
  const totalVolume = blocks.reduce((sum, block) => {
    return sum + block.exercises.reduce((blockSum, exercise) => {
      return blockSum + exercise.totalDistance;
    }, 0);
  }, 0);

  return {
    title: workoutTitle,
    volume: totalVolume,
    intensity: intensity,
    equipment: Array.from(equipment),
    blocks: blocks
  };
};

// –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—Ç–µ–π —Å–ª–æ–∂–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
const parseExerciseParts = (description) => {
  const parts = [];
  const segments = description.split('+').map(s => s.trim());
  
  segments.forEach(segment => {
    const part = {
      distance: 50, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      style: null,
      technique: null,
      intensity: null,
      breathing: null
    };

    // –ò—â–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ —Å–µ–≥–º–µ–Ω—Ç–∞
    const distanceMatch = segment.match(/^(\d+)/);
    if (distanceMatch) {
      part.distance = parseInt(distanceMatch[1]);
    }

    // –ò—â–µ–º —Å—Ç–∏–ª—å
    const styleMap = {
      '–≤—Å—Ç': 'freestyle',
      '–≤–æ–ª—å–Ω—ã–π': 'freestyle',
      '–∫—Ä–æ–ª—å': 'freestyle',
      '–±–∞—Ç—Ç': 'butterfly',
      '–±–∞—Ç—Ç–µ—Ä—Ñ–ª—è–π': 'butterfly',
      '–¥–µ–ª—å—Ñ–∏–Ω': 'butterfly',
      '–±—Ä–∞—Å—Å': 'breaststroke',
      '—Å–ø–∏–Ω–∞': 'backstroke',
      '–Ω–∞ —Å–ø–∏–Ω–µ': 'backstroke',
      '–∫–∞—Ä–∞–±–∞—Å': '–∫–∞—Ä–∞–±–∞—Å',
      '–¥–∏—Ä–∏–∂—ë—Ä': '–¥–∏—Ä–∏–∂—ë—Ä',
      '–ø–µ—Ä–µ–º–µ–Ω–∫–∞': '–ø–µ—Ä–µ–º–µ–Ω–∫–∞',
      '—Å—É–ø–µ—Ä–º–µ–Ω': '—Å—É–ø–µ—Ä–º–µ–Ω'
    };

    for (const [key, value] of Object.entries(styleMap)) {
      if (segment.toLowerCase().includes(key)) {
        part.style = value;
        break;
      }
    }

    // –ò—â–µ–º —Ç–µ—Ö–Ω–∏–∫—É
    const techniqueMap = {
      '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π': '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π',
      '—Å—Ç—Ä–µ–ª–æ—á–∫–∞': '—Å—Ç—Ä–µ–ª–æ—á–∫–∞',
      '–¥–∏—Ä–∏–∂—ë—Ä': '–¥–∏—Ä–∏–∂—ë—Ä',
      '—Å—É–ø–µ—Ä–º–µ–Ω': '—Å—É–ø–µ—Ä–º–µ–Ω',
      '–ø–µ—Ä–µ–º–µ–Ω–∫–∞': '–ø–µ—Ä–µ–º–µ–Ω–∫–∞'
    };

    for (const [key, value] of Object.entries(techniqueMap)) {
      if (segment.toLowerCase().includes(key)) {
        part.technique = value;
        break;
      }
    }

    // –ò—â–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    const intensityMap = {
      '–º—è–≥–∫–æ': '–º—è–≥–∫–æ',
      '–º–æ—â–Ω–æ': '–º–æ—â–Ω–æ',
      '–∫–∞–π—Ñ—É—è': '–∫–∞–π—Ñ—É—è',
      '–ª–µ–≥–∫–æ': '–ª–µ–≥–∫–æ',
      '—Å—Ä–µ–¥–Ω–µ': '—Å—Ä–µ–¥–Ω–µ',
      '—Å–∏–ª—å–Ω–æ': '—Å–∏–ª—å–Ω–æ'
    };

    for (const [key, value] of Object.entries(intensityMap)) {
      if (segment.toLowerCase().includes(key)) {
        part.intensity = value;
        break;
      }
    }

    // –ò—â–µ–º –¥—ã—Ö–∞–Ω–∏–µ
    const breathingMap = {
      '2/2': '2/2',
      '3/3': '3/3',
      '5/5': '5/5',
      '2—Ö —É–¥': '2—Ö —É–¥',
      '3—Ö —É–¥': '3—Ö —É–¥'
    };

    for (const [key, value] of Object.entries(breathingMap)) {
      if (segment.toLowerCase().includes(key)) {
        part.breathing = value;
        break;
      }
    }

    parts.push(part);
  });

  return parts;
};

module.exports = router;
